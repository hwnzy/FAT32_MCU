C51 COMPILER V9.00   SD                                                                    08/19/2016 14:29:52 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SD
OBJECT MODULE PLACED IN SD.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE SD.c COMPACT BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "SD.h"
   2          
   3          unsigned char init_shift_down;//ÔÚ³õÊ¼»¯µÄÊ±ºò£¬ÉèÖÃ´Ë±äÁ¿Îª1£¬Èç´Ë¿ÉÔÚÍ¬²½Êı¾İ´«Êä£¨SPI£©½µµÍËÙ¶È±£³ÖÎÈ¶¨
   4          unsigned char bdata sd_data;
   5          sbit dat0=sd_data^0;
   6          sbit dat1=sd_data^1;
   7          sbit dat2=sd_data^2;
   8          sbit dat3=sd_data^3;
   9          sbit dat4=sd_data^4;
  10          sbit dat5=sd_data^5;
  11          sbit dat6=sd_data^6;
  12          sbit dat7=sd_data^7;
  13          
  14          void NZYdelay(unsigned int time) 
  15          {
  16   1       while(time--);
  17   1      }
  18          /******************************************************************
  19           º¯Êı£ºsd_write_cmd
  20           ¹¦ÄÜ£ºÏòSD¿¨Ğ´ÃüÁî
  21           ******************************************************************/
  22          unsigned char sd_write_cmd(unsigned char *cmd)//ÏòSD¿¨Ğ´ÃüÁî£¬pcmdÊÇÃüÁî×Ö½ÚĞòÁĞµÄÊ×µØÖ·
  23          {
  24   1              unsigned char temp,time=0;
  25   1      
  26   1              SD_CS=1;
  27   1              sd_spi_write(0xff);//Ìá¸ß¼æÈİĞÔÈç¹ûÃ»ÓĞÕâÀï£¬ÓĞĞ©SD¿¨¿ÉÄÜ²»Ö§³Ö
  28   1              SD_CS=0;
  29   1      
  30   1              sd_spi_write(cmd[0]);
  31   1              sd_spi_write(cmd[1]);
  32   1              sd_spi_write(cmd[2]);
  33   1              sd_spi_write(cmd[3]);
  34   1              sd_spi_write(cmd[4]);
  35   1              sd_spi_write(cmd[5]);
  36   1      
  37   1              do{
  38   2                      temp=sd_spi_read();//Ò»Ö±¶Á£¬ÖªµÀ¶Áµ½µÄ²»ÊÇ0xff»ò³¬Ê±
  39   2                      time++;
  40   2              }while((temp==0xff)&&(time<TRY_TIME));
  41   1      
  42   1              return (temp);
  43   1      }
  44          /******************************************************************
  45           º¯Êı£ºsd_reset
  46           ¹¦ÄÜ£º¸´Î»SD¿¨£¬ÓÃµ½CMD0£¬Ê¹ÓÃSD¿¨ÇĞ»»µ½SPIÄ£Ê½
  47           ******************************************************************/
  48          
  49          unsigned char sd_reset()//SD¿¨¸´Î»£¬½øÈëSPIÄ£Ê½£¬Ê¹ÓÃSMD0£¨ÃüÁî0£©
  50          {
  51   1              unsigned char time,temp,i;
  52   1              unsigned char cmd[]={0x40,0x00,0x00,0x00,0x00,0x95};//ÃüÁî0µÄ×Ö½ÚĞòÁĞ
  53   1              init_shift_down=1;//½«is_initÖÃÎª1
  54   1              SD_CS=1;//¹Ø±ÕÆ¬Ñ¡
  55   1              for(i=0;i<0x0f;i++)//¸´Î»Ê±£¬Ê×ÏÈ±ØĞëÒª·¢ËÍ×îÉÙ74¸öÊ±ÖÓĞÅºÅ
C51 COMPILER V9.00   SD                                                                    08/19/2016 14:29:52 PAGE 2   

  56   1              {
  57   2                      sd_spi_write(0xff);//120¸öÊ±ÖÓ
  58   2              }
  59   1              SD_CS=0;//´ò¿ªÆ¬Ñ¡
  60   1              time=0;
  61   1              do{
  62   2                      temp=sd_write_cmd(cmd);//Ğ´ÈëCMD0
  63   2                      time++;
  64   2                      if(time==TRY_TIME)
  65   2                      {
  66   3                              SD_CS=1;//¹Ø±ÕÆ¬Ñ¡
  67   3                              return (INIT_CMD0_ERROR);//CMDOĞ´ÈëÊ§°Ü
  68   3                      }
  69   2              }while(temp!=0x01);
  70   1              SD_CS=1;//¹Ø±ÕÆ¬Ñ¡
  71   1              sd_spi_write(0xff);//°´ÕÕSD¿¨µÄ²Ù×÷Ê±ĞòÔÚÕâÀï²¹8¸öÊ±ÖÓ
  72   1              return 0;//·µ»Ø0£¬ËµÃ÷¸´Î»²Ù×÷³É¹¦
  73   1      }
  74          /******************************************************************
  75           º¯Êı£ºsd_reset
  76           ¹¦ÄÜ£º³õÊ¼»¯SD¿¨£¬Ê¹ÓÃCMD1
  77           ******************************************************************/
  78          unsigned char sd_init()//³õÊ¼»¯£¬Ê¹ÓÃCMD1£¨ÃüÁî1£©
  79          {
  80   1              unsigned char time,temp;
  81   1              unsigned char cmd0[]={0x40,0x00,0x00,0x00,0x00,0x95};//ÃüÁî0µÄ×Ö½ÚĞòÁĞ
  82   1              unsigned char cmd8[]={0x48,0x00,0x00,0x01,0xaa,0x87};//ÃüÁî8µÄ×Ö½ÚĞòÁĞ
  83   1              unsigned char cmd41[]={0x69,0x40,0x00,0x00,0x00,0xff};//ÃüÁî41µÄ×Ö½ÚĞòÁĞ
  84   1              unsigned char cmd55[]={0x77,0x00,0x00,0x00,0x00,0xff};//ÃüÁî55µÄ×Ö½ÚĞòÁĞ
  85   1              for(time=0;time<0x1f;time++)
  86   1              {
  87   2                      sd_spi_write(0xff);
  88   2              }
  89   1              SD_CS=0;//´ò¿ªÆ¬Ñ¡
  90   1              time=0;
  91   1              do{
  92   2                      temp=sd_write_cmd(cmd0);
  93   2                      time++;
  94   2                      if(time>=TRY_TIME)
  95   2                      if(time>=TRY_TIME)
  96   2                      {
  97   3                              SD_CS=1;//¹Ø±ÕÆ¬Ñ¡
  98   3                              return (INIT_CMD1_ERROR);//CMD1Ğ´ÈëÊ§°Ü
  99   3                      }
 100   2              }while(temp!=0x01);
 101   1              time=0;
 102   1              do{
 103   2                      temp=sd_write_cmd(cmd8);
 104   2                      time++;
 105   2                      if(time>=TRY_TIME)
 106   2                      {
 107   3                              SD_CS=1;
 108   3                              return (INIT_CMD1_ERROR);
 109   3                      }
 110   2              }while(temp!=0x01);
 111   1              time=0;
 112   1              do{
 113   2                      temp=sd_write_cmd(cmd55);
 114   2                      time++;
 115   2                      if(time>=TRY_TIME)
 116   2                      {
 117   3                              SD_CS=1;
C51 COMPILER V9.00   SD                                                                    08/19/2016 14:29:52 PAGE 3   

 118   3                              return (INIT_CMD1_ERROR);
 119   3                      }
 120   2              }while(sd_write_cmd(cmd41)!=0x00);
 121   1      
 122   1              init_shift_down=0;//³õÊ¼»¯Íê±Ï£¬¿ÉÒÔ¾¡Á¿Ìá¸ßÊı¾İ´«ÊäËÙÂÊ
 123   1              
 124   1              SD_CS=1;//¹Ø±ÕÆ¬Ñ¡
 125   1              sd_spi_write(0xff);//°´ÕÕSD¿¨µÄ²Ù×÷Ê±ĞòÔÚÕâÀï²¹8¸öÊ±ÖÓ
 126   1              return (0);//·µ»Ø0£¬ËµÃ÷³õÊ¼»¯²Ù×÷³É¹¦  
 127   1      }
 128          /****************************************************************************
 129           º¯Êı£ºsd_reset
 130           ¹¦ÄÜ£º½«bufferÖ¸ÏòµÄ512¸ö×Ö½ÚµÄÊı¾İĞ´Èëµ½SD¿¨µÄaddrÉÈÇøÖĞ
 131           ****************************************************************************/
 132          unsigned charsd_write_sector(unsigned long addr,unsigned char *buffer) //ÏòSD¿¨ÖĞµÄÖ¸¶¨µØÖ·µÄÉÈÇøĞ´Èë512¸ö
             -×Ö½Ú£¬Ê¹ÓÃCMD24£¨ÃüÁî24£©
 133          {  
 134   1              unsigned char temp,time;
 135   1              unsigned int i;
 136   1              unsigned char cmd[]={0x58,0x00,0x00,0x00,0x00,0xff}; //ÏòSD¿¨ÖĞµ¥¸ö¿é£¨512×Ö½Ú£¬Ò»¸öÉÈÇø£©Ğ´ÈëÊı¾İ£¬ÓÃCM
             -D24
 137   1              //addr<<=9; //addr = addr * 512 ½«¿éµØÖ·£¨ÉÈÇøµØÖ·£©×ªÎª×Ö½ÚµØÖ· £ÛÕâÀï¾ÍÏŞÖÆÁËSD¿¨µÄ×î´óÈİÁ¿Îª4G£İ
 138   1       
 139   1              cmd[1]=((addr&0xff000000)>>24); //½«×Ö½ÚµØÖ·Ğ´Èëµ½CMD24×Ö½ÚĞòÁĞÖĞ
 140   1              cmd[2]=((addr&0x00ff0000)>>16);
 141   1              cmd[3]=((addr&0x0000ff00)>>8);
 142   1              cmd[4]=(addr&0x000000ff);
 143   1              SD_CS=0;//´ò¿ªSD¿¨Æ¬Ñ¡
 144   1              time=0;
 145   1              do
 146   1              {  
 147   2                      temp=sd_write_cmd(cmd);
 148   2                      time++;
 149   2              if(time==TRY_TIME) 
 150   2              { 
 151   3                      SD_CS=1; //¹Ø±ÕÆ¬Ñ¡
 152   3                      return(temp); //ÃüÁîĞ´ÈëÊ§°Ü
 153   3              }
 154   2              }while(temp!=0);
 155   1      
 156   1              for(i=0;i<100;i++) //ÕâÀïÒª²åÈëÈô¸ÉÊ±ÖÓĞÅºÅ
 157   1              {
 158   2                      sd_spi_write(0xff);
 159   2              } 
 160   1      
 161   1              sd_spi_write(0xfe);//Ğ´Èë¿ªÊ¼×Ö½Ú 0xfe£¬ºóÃæ¾ÍÊÇÒªĞ´ÈëµÄ512¸ö×Ö½ÚµÄÊı¾İ 
 162   1      
 163   1              for(i=0;i<512;i++) //½«»º³åÇøÖĞÒªĞ´ÈëµÄ512¸ö×Ö½ÚĞ´ÈëSD¿¨
 164   1              {
 165   2                      sd_spi_write(buffer[i]);
 166   2              }
 167   1      
 168   1              sd_spi_write(0xff); 
 169   1              sd_spi_write(0xff); //Á½¸ö×Ö½ÚµÄCRCĞ£ÑéÂë£¬²»ÓÃ¹ØĞÄ 
 170   1              temp=sd_spi_read();   //¶ÁÈ¡·µ»ØÖµ
 171   1      
 172   1              if((temp&0x1F)!=0x05) //Èç¹û·µ»ØÖµÊÇ XXX00101ËµÃ÷Êı¾İÒÑ¾­±»SD¿¨½ÓÊÜÁË
 173   1              {
 174   2                      SD_CS=1;
 175   2                      return(WRITE_BLOCK_ERROR); //Ğ´¿éÊı¾İÊ§°Ü
 176   2              }
 177   1              while(sd_spi_read()!=0xff);//µÈµ½SD¿¨²»Ã¦£¨Êı¾İ±»½ÓÊÜÒÔºó£¬SD¿¨Òª½«ÕâĞ©Êı¾İĞ´Èëµ½×ÔÉíµÄFLASHÖĞ£¬ĞèÒªÒ»¸
C51 COMPILER V9.00   SD                                                                    08/19/2016 14:29:52 PAGE 4   

             -öÊ±¼ä£©
 178   1                //Ã¦Ê±£¬¶Á»ØÀ´µÄÖµÎª0x00,²»Ã¦Ê±£¬Îª0xff
 179   1              SD_CS=1; //¹Ø±ÕÆ¬Ñ¡
 180   1              sd_spi_write(0xff);//°´ÕÕSD¿¨µÄ²Ù×÷Ê±ĞòÔÚÕâÀï²¹8¸öÊ±ÖÓ
 181   1              return(0);   //·µ»Ø0,ËµÃ÷Ğ´ÉÈÇø²Ù×÷³É¹¦
 182   1      }
 183          /****************************************************************************
 184           º¯Êı£ºsd_reset
 185           ¹¦ÄÜ£º¶ÁÈ¡addrÉÈÇøµÄ512¸ö×Ö½Úµ½bufferÖ¸ÏòµÄÊı¾İ»º³åÇø
 186           ****************************************************************************/
 187          unsigned char sd_read_sector(unsigned long addr,unsigned char *buffer)//´ÓSD¿¨µÄÖ¸¶¨ÉÈÇøÖĞ¶Á³ö512¸ö×Ö½Ú£¬Ê
             -¹ÓÃCMD17£¨17ºÅÃüÁî£©
 188          {
 189   1              unsigned int j;
 190   1              unsigned char time,temp;
 191   1              unsigned char cmd[]={0x51,0x00,0x00,0x00,0x00,0xff}; //CMD17µÄ×Ö½ÚĞòÁĞ
 192   1         
 193   1              //addr<<=9; //addr=addr*512    ½«¿éµØÖ·£¨ÉÈÇøµØÖ·£©×ªÎª×Ö½ÚµØÖ·
 194   1              cmd[1]=((addr&0xff000000)>>24);//½«×Ö½ÚµØÖ·Ğ´Èëµ½CMD17×Ö½ÚĞòÁĞÖĞ
 195   1              cmd[2]=((addr&0x00FF0000)>>16);
 196   1              cmd[3]=((addr&0x0000FF00)>>8);
 197   1              cmd[4]=(addr&0x000000ff);
 198   1              SD_CS=0;//´ò¿ªÆ¬Ñ¡
 199   1              time=0;
 200   1              do
 201   1              {  
 202   2                      temp=sd_write_cmd(cmd); //Ğ´ÈëCMD17
 203   2                      time++;
 204   2                      if(time==TRY_TIME) 
 205   2              {
 206   3                      return(READ_BLOCK_ERROR); //¶Á¿éÊ§°Ü
 207   3              }
 208   2              }while(temp!=0); 
 209   1            
 210   1              while (sd_spi_read()!= 0xfe); //Ò»Ö±¶Á£¬µ±¶Áµ½0xfeÊ±£¬ËµÃ÷ºóÃæµÄÊÇ512×Ö½ÚµÄÊı¾İÁË
 211   1              for(j=0;j<512;j++)  //½«Êı¾İĞ´Èëµ½Êı¾İ»º³åÇøÖĞ
 212   1              {/*512ÕâÀïÓÉÓÚÃ»ÓĞÍâ²¿µÄFLASH´¢´æÆ÷£¬¹ÊÖ»ÊÇÔÚRAMÖĞ´´½¨Ò»¸öpcmb1[5]£¬ÓÃÓÚ¼ìÑé*/ 
 213   2                      buffer[j]=sd_spi_read();
 214   2              }
 215   1              sd_spi_read();
 216   1              sd_spi_read();//¶ÁÈ¡Á½¸ö×Ö½ÚµÄCRCĞ£ÑéÂë£¬²»ÓÃ¹ØĞÄËüÃÇ
 217   1              SD_CS=1;  //SD¿¨¹Ø±ÕÆ¬Ñ¡
 218   1              sd_spi_write(0xff);//°´ÕÕSD¿¨µÄ²Ù×÷Ê±ĞòÔÚÕâÀï²¹8¸öÊ±ÖÓ
 219   1              return 0;
 220   1      }
 221          /******************************************************************
 222           º¯Êı£ºsd_reset
 223           ¹¦ÄÜ£ºIOÄ£ÄâSPI£¬·¢ËÍÒ»¸ö×Ö½Ú
 224           ******************************************************************/
 225          
 226          void sd_spi_write(unsigned char x) 
 227          {
 228   1              sd_data=x;
 229   1       
 230   1              SD_SI=dat7;
 231   1              SD_SCL=0; 
 232   1              if(init_shift_down) NZYdelay(DELAY_TIME); 
 233   1              SD_SCL=1;
 234   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 235   1      
 236   1              SD_SI=dat6;
 237   1              SD_SCL=0; 
C51 COMPILER V9.00   SD                                                                    08/19/2016 14:29:52 PAGE 5   

 238   1              if(init_shift_down) NZYdelay(DELAY_TIME); 
 239   1              SD_SCL=1;
 240   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 241   1      
 242   1              SD_SI=dat5;
 243   1              SD_SCL=0;
 244   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 245   1              SD_SCL=1;
 246   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 247   1      
 248   1              SD_SI=dat4;
 249   1              SD_SCL=0;
 250   1              if(init_shift_down) NZYdelay(DELAY_TIME); 
 251   1              SD_SCL=1;
 252   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 253   1      
 254   1              SD_SI=dat3;
 255   1              SD_SCL=0; 
 256   1              if(init_shift_down) NZYdelay(DELAY_TIME); 
 257   1              SD_SCL=1;
 258   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 259   1      
 260   1              SD_SI=dat2;
 261   1              SD_SCL=0;
 262   1              if(init_shift_down) NZYdelay(DELAY_TIME); 
 263   1              SD_SCL=1;
 264   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 265   1      
 266   1              SD_SI=dat1;
 267   1              SD_SCL=0; 
 268   1              if(init_shift_down) NZYdelay(DELAY_TIME); 
 269   1              SD_SCL=1;
 270   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 271   1      
 272   1              SD_SI=dat0;
 273   1              SD_SCL=0;
 274   1              if(init_shift_down) NZYdelay(DELAY_TIME);  
 275   1              SD_SCL=1;
 276   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 277   1      }
 278          
 279          /******************************************************************
 280           º¯Êı£ºsd_reset
 281           ¹¦ÄÜ£ºIOÄ£ÄâSPI£¬¶ÁÈ¡Ò»¸ö×Ö½Ú
 282          ******************************************************************/
 283          
 284          unsigned char sd_spi_read() //SPI¶ÁÒ»¸ö×Ö½Ú
 285          {  
 286   1              SD_SO=1;
 287   1      
 288   1              SD_SCL=1;
 289   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 290   1              SD_SCL=0;
 291   1              if(init_shift_down) NZYdelay(DELAY_TIME); 
 292   1              dat7=SD_SO; 
 293   1      
 294   1              SD_SCL=1;
 295   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 296   1              SD_SCL=0;
 297   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 298   1              dat6=SD_SO; 
 299   1              
C51 COMPILER V9.00   SD                                                                    08/19/2016 14:29:52 PAGE 6   

 300   1              SD_SCL=1;
 301   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 302   1              SD_SCL=0;
 303   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 304   1              dat5=SD_SO; 
 305   1      
 306   1              SD_SCL=1;
 307   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 308   1              SD_SCL=0;
 309   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 310   1              dat4=SD_SO; 
 311   1      
 312   1              SD_SCL=1;
 313   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 314   1              SD_SCL=0;
 315   1              if(init_shift_down) NZYdelay(DELAY_TIME); 
 316   1              dat3=SD_SO; 
 317   1      
 318   1              SD_SCL=1;
 319   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 320   1              SD_SCL=0;
 321   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 322   1              dat2=SD_SO; 
 323   1              
 324   1              SD_SCL=1;
 325   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 326   1              SD_SCL=0;
 327   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 328   1              dat1=SD_SO;
 329   1      
 330   1              SD_SCL=1;
 331   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 332   1              SD_SCL=0;
 333   1              if(init_shift_down) NZYdelay(DELAY_TIME);
 334   1              dat0=SD_SO; 
 335   1       
 336   1              return (sd_data);
 337   1      }
 338          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1347    ----
   CONSTANT SIZE    =     42    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =      1      71
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
